name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "Docs/*"
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    name: Build JAR File
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.0
    - name: Setup JDK
      uses: actions/setup-java@v3.11.0
      with:
        distribution: 'temurin'
        java-version: '11'
    - name: Compile Java
      run: |
        javac -d bin -cp src $(find src -name '*.java')
    - name: Build JAR file
      run: |
        cd bin
        jar cfm JDec.jar manifest.txt *.class
      
    - name: Build WARP-Java JAR file
      run: |
        cd bin
        jar cfm JDec.jar manifest.txt $(find . -name '*.class')
    - name: Upload JAR file
      uses: actions/upload-artifact@v3.1.2
      with:
        name: JDec-JAR
        path: bin/JDec.jar
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
        - name: Windows
          tag: windows-latest
          separator: '\;'
        - name: Ubuntu
          tag: ubuntu-latest
          separator: ':'
    name: Unit Tests (${{ matrix.os.name }})
    runs-on: ${{ matrix.os.tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v1
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin # Eclipse Temurin
        java-version: '11'    # Java 11 (LTS)
    - name: Cache Dependency Library
      id: load-lib-cache
      uses: actions/cache@v3
      with:
        path: ${{ runner.temp }}/lib
        key: junit-v1.9.2
    - name: Download JUnit Console Standalone
      if: steps.load-lib-cache.outputs.cache-hit != 'true'
          # Only run if cached file does not exist
      run: |
        mkdir ${{ runner.temp }}/lib
        cd ${{ runner.temp }}/lib
        curl -o junit-platform-console-standalone-1.9.2.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.9.2/junit-platform-console-standalone-1.9.2.jar
    - name: Compile Java (Ubuntu)
      if: ${{ matrix.os.name == 'Ubuntu' }}
      run: |
        javac -cp src $(find src -name '*.java')
        javac -cp src${{ matrix.os.separator }}test${{ matrix.os.separator }}${{ runner.temp }}/lib/junit-platform-console-standalone-1.9.2.jar $(find test -name '*.java')
      shell: bash
    - name: Compile Java (Windows)
      if: ${{ matrix.os.name == 'Windows' }}
      run: |
        mkdir lib
        cp ${{ runner.temp }}/lib/junit-platform-console-standalone-1.9.2.jar lib/junit-platform-console-standalone-1.9.2.jar
        javac -cp src $(find src -name '*.java')
        javac -cp src${{ matrix.os.separator }}test${{ matrix.os.separator }}lib/junit-platform-console-standalone-1.9.2.jar $(find test -name '*.java')
      shell: bash
    - name: Run Unit Tests (Ubuntu)
      if: ${{ matrix.os.name == 'Ubuntu' }}
      run: |
        java -jar ${{ runner.temp }}/lib/junit-platform-console-standalone-1.9.2.jar -cp src -cp test --scan-classpath --reports-dir=.
    - name: Run Unit Tests (Windows)
      if: ${{ matrix.os.name == 'Windows' }}
      run: |
        java -jar lib/junit-platform-console-standalone-1.9.2.jar -cp src -cp test --scan-classpath --reports-dir=.
    - name: Publish Test Results (Ubuntu)
      if: ${{ matrix.os.name == 'Ubuntu' && always() }}
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        junit_files: "**/TEST-*.xml"
        check_name: Test Results - ${{ matrix.os.name }}
    - name: Publish Test Results (Windows)
      if: ${{ matrix.os.name == 'Windows' && always() }}
      uses: mikepenz/action-junit-report@v3
      with:
        report_paths: "**/TEST-*.xml"
        check_name: Test Results - ${{ matrix.os.name }}

