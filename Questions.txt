HOURS:
Friday, August 7: (Expected: 6h) 7:24 - 

JAVADOC TO-DO LIST:
  
  TestAutomata.java

QUESTIONS:
  -Are there any small examples using 3 controllers that do not blow up very large and are easily verifiable? (I'm looking for a good test case)
  -how far into the program can a user get with an uncontrollable system?

SHORT-TERM:

  -save as button should also move the .dot and .svg and .png files!!
  -change control_down_mask to Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() (http://alvinalexander.com/blog/post/jfc-swing/how-program-apple-command-key-keystroke-java-swing-mac-osx)
  -make GUI input code validation more verbose (console messages won't be visible to the user). Perhaps when they generate an automaton, have a popup containing a scrollview with the lines of input that were not understood?? And tips to correct them? OR BETTER YET: Use a 'syntax' highlighting feel to validate lines of input - see code on my dad's laptop called JavaEditor?
  -work on shapley values! in order to do this, the u-structure must maintain controllable and observable properties
  -4. [Not discussed yet but will come up with Nash] user selects all/any senders and all/any receivers and asks for the quantitatively "cheapest" protocol - implement this!! Refactor the class which allows the user to pick senders and recievers
  -should the u-structure event properties appear now that we've added them when doing syncrhonized composition?
  -add buttons to mark special transitions in GUI? (menu options would work great for this! With checkboxes), specifically marking Bad Transitions is useful
  -add buttons to add events, add states, and add transitions (maybe little plus icons?)
  -Make generated automata accessible
  -NSGA-II algorithm:
    -Code algorithms 3 and 4
  -lemke-howson file input (specify which pivot or specify "ALL")
  -deploy as jar
  -mark disablement decisions in the u-structure and crush with a dotted line
  -Logo
  -test case: U-structure basic example, only 1 controller (should be no conditional violation)
  -prevent user from adding communications if there was a communication that was a self-loop (display message), this is cyclic vs. acyclic
  -tooltips dissapear when button is clicked
  -option to manually load GUI input code for large automata (alternatively, we could have a screen with automaton stats and list of events, basically everything that is in the header file)

  POTENTIAL:
  -Create settings:
    -"overlap=scale;" should be an option for the user since it makes a drastic difference in the output of the graphs
    -open blank automaton tab when program opens (default is yes)
  -File->Open Recent menu (up to 10 most recent items, with separator then "Clear Items" which removes all previous recent items. This button is disabled when there are 0 items)
  -In Automaton::addState(), there is the potential for 3 calls to recreateBinaryFile. This should be combined into one call.
  -Currently regenerating uStructures when clicking "Generate Automaton" button (but they were already generated before when testing for feasibility, so we should store them). NOTE: While this would be more efficient, I do not see a clean way of implementing it
  -Multiple violations on the same transition are not properly drawn in graphviz (we should draw them as two separate transitions)
  -Warning message when saving in GUI to overwrite files
  -There are 3 tooltips left to go in the XML file (from the buttons to generate the image, view image, and generate automaton)
  -Co-acessible warning message if there are no marked states
  -Allow modifications to automaton without regenerating the entire thing (example: adding a state or a transition)
  -What about if multiple JDec processes are being run at the same time?? Create temporary folder based on PID (NOTE: PID can't easily be found)