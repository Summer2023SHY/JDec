HOURS:
Saturday, August 1: 2 hours
Sunday, August 2: 2 hours
Monday, August 3: 4 hours 30 minutes, 2:05 - 

JAVADOC TO-DO LIST:
  
  TestAutomata.java

QUESTIONS:
  -Discuss what conditional co-observability is.....
  -I'm still trying to wrap my head around disablement decisions
  -Do generated automata need to be accessible?
  -how far into the program can a user get with an uncontrollable system?
  -where do we need to make notes about cyclic vs. acyclic??
  -Are there any small examples using 3 controllers that do not blow up very large and are easily verifiable? (I'm looking for a good test case)
  -For the observer automaton, if at least one state is marked, does that mean that the entire group of states will be marked in the observer (Figure 2.22 on pg. 89)?

SHORT-TERM:

  -mark disablement decisions in the u-structure and crush with a dotted line:
    U-Structure: If the transition is bad in the 0th position, and bad for all of the controllers that control the outgoing event, then that transition represents a pure disablement decision
    Crush: If the .............? Re-read email...
  -create NSGA-II algorithm - currently on hold (we can already assign ranks to a set of individuals)
  -access Lemke-howson through Test class, run Nash through it
  -4. [Not discussed yet but will come up with Nash] user selects all/any senders and all/any receivers and asks for the quantitatively "cheapest" protocol
  -Make sure the correct special transitions are being parsed right for each automaton type
  -currently regenerating uStructures when clicking "Generate Automaton" button (but they were already generated before when testing for feasibility, so we should store them)
  -add buttons to mark special transitions in GUI? (menu options would work great for this! With checkboxes)
  -option to manually load GUI input code for large automata (alternatively, we could have a screen with automaton stats and list of events, basically everything that is in the header file)
  -add export special transitions to file (or clipboard!)
    checkboxes for the following:
    -add export conditional violations to txt file
    -add export unconditional violations to txt file
    -add export potential communications to txt file
  -In Automaton::addState(), there is the potential for 3 calls to recreateBinaryFile. This should be combined into one call.

  POTENTIAL:
  -warning message when saving in GUI to overwrite files
  -There are 3 tooltips left to go in the XML file (from the buttons to generate the image, view image, and generate automaton)
  -co-acessible warning message if there are no marked states
  -message if no initial state is defined (abort generation of automaton), then we can remove some error-checking in the automaton class (NOTE: This affects a lot of our test cases..)
  -Allow modifications to automaton without regenerating the entire thing (example: adding a state or a transition)
  -Creating observer automaton (p.89) (WIP in GitHub history)
  -Allow user to specify layout mode
  -Projection operation
  -What about if multiple JDec processes are being run at the same time?? Create temporary folder based on PID (NOTE: PID can't easily be found)