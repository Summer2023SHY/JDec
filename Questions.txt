HOURS:
Thursday, September 10: 1 hour 30 minutes
Sunday, September 20: 1 hour 30 minutes
Monday, September 21: 1 hour 5 minutes, 3:48 -

CHOSEN EVENTS (WITH ORIGINAL PROPERTIES)
take_item,TF,TF
package,TF,FF
allow_exit,TF,TF
part_f_obuff,TF,TF
deposit_part,TF,TF
part_ent,TT,TT
fin_exit,TT,FF
start_pol,FT,FT
start_case,FT,FT
comp_pol,FT,FF
compl_case,FT,FF
dip_acid,FT,FT
polish,FT,FT
str_rlse,FT,FT
attch_case,FT,FF

BEFORE DIVISION:
take_item, TFF,TTFF
package, TFF,FFFF
allow_exit, TFF,TTFF
part_f_obuff, TFF,TTFF
deposit_part, TFF,TTFF
part_ent, T T,TTTT
fin_exit, T T,FFFF

start_pol,FF T,FFTT
start_case,FF T,FFTT
comp_pol,FF T,FFFF
compl_case,FF T,FFFF
dip_acid,FF T,FFTT
polish,FF T,FFTT
str_rlse,FF T,FFTT
attch_case,FF T,FFFF

NOTES:

-apparently synchronization in Java is not a thing by default..
-feature: add menu option and shortcut for generate automaton from code
-feature: autocompletion for event and state names in the transitions
-feature: duplicate tab (creates new tab with the same text, as 'untitled' automaton)
-bug: .dot file doesn't seem to be generated if there are no states in the automaton (double-check this)
-fix synchronized composition (special case) - add test case  n = 2 (and add test case for n=2 which reduces down to something similar to n=1)
-put bad transitions under only one bad transition when possible
-gui validation deterministic check (check when adding a transition)??
-investigate
  Exception in thread "AWT-EventQueue-0" java.lang.OutOfMemoryError: can't create offscreen surface
        at sun.java2d.opengl.OGLSurfaceData.initSurfaceNow(OGLSurfaceData.java:298)
        at sun.java2d.opengl.OGLSurfaceData.access$000(OGLSurfaceData.java:98)
        at sun.java2d.opengl.OGLSurfaceData$1.run(OGLSurfaceData.java:324)
        at sun.java2d.opengl.OGLRenderQueue$QueueFlusher.run(OGLRenderQueue.java:232)
-write algorithm to find counterexample (mark state and use trim?)

-MYERSON: in the example in the paper, they are picking the communication protocol that is cheapest? It doesn't look the exact same as our 'simplified' algorithm?? Where we add all communications then prune the excess ones

-fix observability test to account for cases where a controller can disable an event due to the prefix it has observed so far
  -this special case happens for all bad transitions where there a controller cannot observe the event but it can control it??

-add test case for myerson values
-finish implementing myerson values
-add 'busy cursor' in operations which do not have some other kind of progress indicator
-NSGA-II algorithm:
  -Code algorithms 3 and 4
-Warning message when saving in GUI to overwrite files
-test how far into the program can a user get with an uncontrollable system?
-Documentation for each operation on website - what about help system?? How was it implemented in DESUMA?
-NOTE: progressbarpopup class is not currently used