HOURS:
Saturday, August 1: 2 hours
Sunday, August 2: 2 hours
Monday, August 3: 7 hours
Tuesday, August 4: 5 hours
Wednesday, August 5: 4 hours 15 minutes, 6:58 -  

JAVADOC TO-DO LIST:
  
  TestAutomata.java

THURSDAY:
  -I'm still trying to wrap my head around disablement decisions - sent email
  -Do generated automata need to be accessible? - if it does, that complicates things..
  -look at my presentation
  -Discuss what conditional co-observability is.....
  -where do we need to make notes about cyclic vs. acyclic??
  
QUESTIONS:
  -Are there any small examples using 3 controllers that do not blow up very large and are easily verifiable? (I'm looking for a good test case)
  -how far into the program can a user get with an uncontrollable system?
  -For the observer automaton, if at least one state is marked, does that mean that the entire group of states will be marked in the observer (Figure 2.22 on pg. 89)?

SHORT-TERM:

  -tooltips dissapear when button is clicked
  -what should the U-structure look like when there were loops in the system automaton? Consider this small example with event "a", state "1", and transition "1,a,1". Shouldn't there be a self-loop in the U-structure?
  -mark disablement decisions in the u-structure and crush with a dotted line:
    U-Structure: If the transition is bad in the 0th position, and bad for all of the controllers that control the outgoing event, then that transition represents a pure disablement decision
    Crush: If the .............? Re-read email...
  -create NSGA-II algorithm - currently on hold (we can already assign ranks to a set of individuals)
  -Lemke-howson
  -4. [Not discussed yet but will come up with Nash] user selects all/any senders and all/any receivers and asks for the quantitatively "cheapest" protocol
  -add buttons to mark special transitions in GUI? (menu options would work great for this! With checkboxes)
  -option to manually load GUI input code for large automata (alternatively, we could have a screen with automaton stats and list of events, basically everything that is in the header file)

  POTENTIAL:
  -Create settings: "overlap=scale;" should be an option for the user since it makes a drastic difference in the output of the graphs
  -File->Open Recent menu
  -In Automaton::addState(), there is the potential for 3 calls to recreateBinaryFile. This should be combined into one call.
  -currently regenerating uStructures when clicking "Generate Automaton" button (but they were already generated before when testing for feasibility, so we should store them). NOTE: While this would be more efficient, I do not see a clean way of implementing it
  -Multiple violations on the same transition are not properly drawn in graphviz (we should draw them as two separate transitions)
  -Warning message when saving in GUI to overwrite files
  -There are 3 tooltips left to go in the XML file (from the buttons to generate the image, view image, and generate automaton)
  -Co-acessible warning message if there are no marked states
  -Allow modifications to automaton without regenerating the entire thing (example: adding a state or a transition)
  -What about if multiple JDec processes are being run at the same time?? Create temporary folder based on PID (NOTE: PID can't easily be found)