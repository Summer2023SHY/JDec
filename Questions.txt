HOURS:
Friday, July 31: 2:00 -  (EXPECTED: 6 minutes)

JAVADOC TO-DO LIST:
  
  TestAutomata.java

QUESTIONS:

  observable property of automaton - build U-structure, ensure there are not any violations ?? is this right??
  -where do we need to make notes about cyclic vs. acyclic??
  -Are there any small examples using 3 controllers that do not blow up very large and are easily verifiable? (I'm looking for a good test case)
  -For the observer automaton, if at least one state is marked, does that mean that the entire group of states will be marked in the observer (Figure 2.22 on pg. 89)?

SHORT-TERM:

  -add test case by ricker
  -start NSGA-II algorithm (made method to generate non-dominated front for pareto)
  -change export to SVG to view SVG in browser, add message if it could not be displayed (and give them the location of the file), don't re-generate SVG each time, make it at the same time as PNG
  -access Lemke-howson through Test class, run Nash through it
  -Add test case for system does not satisfy observability in Nash algorithm (exception handling)
  -4. [Not discussed yet but will come up with Nash] user selects all/any senders and all/any receivers and asks for the quantitatively "cheapest" protocol
  -Ensure that I'm not making the following mistake anywhere: letting two automata share a reference to the same piece of CommunicationData for example.. If one automaton changed it, then it would mess up the other one
  -Add options to generate random automaton:
    observable - build U-structure, ensure there are not any violations ?? is this right??
    controllable - there cannot be a bad transition that has an event that is uncontrollable by all controllers
  -finish loading bars when loading automaton
  -fix divider issue (NOTE: this only occurs when loading, not when doing an operation!!!)
  -Nash probability values : feature to automatically distribute? cases where default doesn't add up to 1?)
  -test case for isFeasible() with mustAlsoSolveControlProblem=true
  -Make sure the correct special transitions are being parsed right for each automaton type
  -Add JDec constants for pop-up widths and heights (perhaps add JDecDialog class?)
  -add more tests for crush (include one which contains loops!)
  -currently regenerating uStructures when clicking "Generate Automaton" button (but they were already generated before when testing for feasibility, so we should store them)
  -In parsing U-Structure GUI input, add validation check for event vectors?
  -add buttons to mark special transitions in GUI? (menu options would work great for this! With checkboxes)
  -parse GUI input differently depending on the type
  -warning message when saving in GUI to overwrite files??
  -option to manually load GUI input code for large automata (alternatively, we could have a screen with automaton stats and list of events, basically everything that is in the header file)
  -add export special transitions to file (or clipboard!)
    checkboxes for the following:
    -add export conditional violations to txt file
    -add export unconditional violations to txt file
    -add export potential communications to txt file
  -export to multiple formats at once (and then when user hits exports, let them choose where this file gets copied to)!
  -Add tests to runAutomatonCapacityTestRoutine that check how capacity expanding works
  -add export to png (maybe others?)
  -Add addCommunications test for 3 controllers!!
  -Add test case for accessible, one more test case for union (because I'm not 100% confident in the sets of Events working as expected)
  -In Automaton::addState(), there is the potential for 3 calls to recreateBinaryFile. This should be combined into one call.

  POTENTIAL:
  -co-acessible warning message if there are no marked states
  -message if no initial state is defined (abort generation of automaton), then we can remove some error-checking in the automaton class (NOTE: This affects a lot of our test cases..)
  -Allow modifications to automaton without regenerating the entire thing (example: adding a state or a transition)
  -Creating observer automaton (p.89) (WIP in GitHub history)
  -Allow user to specify layout mode
  -Zoom feature in image (generate larger image) - or use formats such as SVG
  -Projection operation
  -What about if multiple JDec processes are being run at the same time?? Create temporary folder based on PID (NOTE: PID can't easily be found)